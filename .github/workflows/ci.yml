name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: battleship_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      working-directory: ./backend
      run: go mod download

    - name: Run tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/battleship_test?sslmode=disable
      run: go test -v ./...

    - name: Run race condition tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/battleship_test?sslmode=disable
      run: go test -race -v ./...

    - name: Check code formatting
      working-directory: ./backend
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted properly:"
          gofmt -s -l .
          exit 1
        fi

    - name: Run go vet
      working-directory: ./backend
      run: go vet ./...

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run linter
      working-directory: ./frontend
      run: npm run lint

    - name: Run tests
      working-directory: ./frontend
      run: npm test

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/

  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: test-backend

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Build binary
      working-directory: ./backend
      run: |
        CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main .

    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: backend-binary
        path: backend/main

  # docker-build:
  #   name: Build Docker Images
  #   runs-on: ubuntu-latest
  #   needs: [test-backend, test-frontend]
  #   if: github.ref == 'refs/heads/main'

  #   steps:
  #   - uses: actions/checkout@v4

  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v3

  #   - name: Log in to Docker Hub
  #     uses: docker/login-action@v3
  #     with:
  #       username: ${{ secrets.DOCKER_USERNAME }}
  #       password: ${{ secrets.DOCKER_PASSWORD }}

  #   - name: Build and push backend image
  #     uses: docker/build-push-action@v5
  #     with:
  #       context: ./backend
  #       push: true
  #       tags: |
  #         ${{ secrets.DOCKER_USERNAME }}/battleship-backend:latest
  #         ${{ secrets.DOCKER_USERNAME }}/battleship-backend:${{ github.sha }}

  #   - name: Build and push frontend image
  #     uses: docker/build-push-action@v5
  #     with:
  #       context: ./frontend
  #       push: true
  #       tags: |
  #         ${{ secrets.DOCKER_USERNAME }}/battleship-frontend:latest
  #         ${{ secrets.DOCKER_USERNAME }}/battleship-frontend:${{ github.sha }}

  # deploy-lambda:
  #   name: Deploy to AWS Lambda
  #   runs-on: ubuntu-latest
  #   needs: [test-backend, test-frontend]
  #   if: github.ref == 'refs/heads/main'

  #   steps:
  #   - uses: actions/checkout@v4

  #   - name: Set up Go
  #     uses: actions/setup-go@v4
  #     with:
  #       go-version: '1.21'

  #   - name: Set up Node.js
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: '18'

  #   - name: Install Serverless Framework
  #     run: npm install -g serverless

  #   - name: Build Lambda functions
  #     working-directory: ./lambda
  #     run: |
  #       chmod +x build.sh
  #       ./build.sh

  #   - name: Deploy to AWS
  #     working-directory: ./lambda
  #     env:
  #       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       DATABASE_URL: ${{ secrets.DATABASE_URL }}
  #       JWT_SECRET: ${{ secrets.JWT_SECRET }}
  #     run: |
  #       chmod +x deploy.sh
  #       ./deploy.sh prod
